
package conversor;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import conversor.MainApp;

import javax.swing.JOptionPane;

import conversor.MainApp;

import javax.swing.JOptionPane;

import javax.swing.JOptionPane;

public class ConversorTemperaturas extends javax.swing.JFrame {

    private JTextField txtCantidad;
    private JComboBox cmbConversion;
    private JLabel lblResultado;

    public ConversorTemperaturas() {
        setTitle("Conversor de Temperaturas");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(300, 200);
        setLocationRelativeTo(null);

        // Crear componentes
        JLabel lblTitulo = new JLabel("Conversor de Temperaturas");
        JLabel lblCantidad = new JLabel("Ingrese la cantidad:");
        txtCantidad = new JTextField(10);
        JButton btnConvertir = new JButton("Convertir");
        lblResultado = new JLabel();
        cmbConversion = new JComboBox<>();
        cmbConversion.addItem("Celsius a Kelvin");
        cmbConversion.addItem("Celsius a Fahrenheit");
        cmbConversion.addItem("Kelvin a Celsius");
        cmbConversion.addItem("Fahrenheit a Celsius");

        // Establecer diseño
        setLayout(new GridLayout(5, 1));
        add(lblTitulo);
        add(lblCantidad);
        add(txtCantidad);
        add(cmbConversion);
        add(btnConvertir);
        add(lblResultado);

        // Agregar evento de acción al botón Convertir
        btnConvertir.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Obtener la cantidad ingresada por el usuario
                double cantidad = Double.parseDouble(txtCantidad.getText());

                // Realizar la conversión según la opción seleccionada
                double resultado = 0.0;
                String conversionSeleccionada = (String) cmbConversion.getSelectedItem();
                String[] conversion = conversionSeleccionada.split(" ");

                switch (conversion[2]) {
                    case "Kelvin":
                        if (conversion[0].equals("Celsius")) {
                            resultado = cantidad + 273.15;
                        } else if (conversion[0].equals("Fahrenheit")) {
                            resultado = (cantidad + 459.67) * 5 / 9;
                        }
                        break;
                    case "Celsius":
                        if (conversion[0].equals("Kelvin")) {
                            resultado = cantidad - 273.15;
                        } else if (conversion[0].equals("Fahrenheit")) {
                            resultado = (cantidad - 32) * 5 / 9;
                        }
                        break;
                    case "Fahrenheit":
                        if (conversion[0].equals("Celsius")) {
                            resultado = (cantidad * 9 / 5) + 32;
                        } else if (conversion[0].equals("Kelvin")) {
                            resultado = (cantidad * 9 / 5) - 459.67;
                        }
                        break;
                }

                // Mostrar el resultado en la etiqueta
                lblResultado.setText("El resultado es: " + String.format("%.2f", resultado) + " " + conversion[2]);

                // Mostrar ventana de confirmación
                int opcion = JOptionPane.showConfirmDialog(null, "¿Desea hacer otra conversión?", "Confirmar", JOptionPane.YES_NO_OPTION);
                if (opcion == JOptionPane.YES_OPTION) {
                    // Reiniciar la interfaz para hacer otra conversión
                    txtCantidad.setText("");
                    lblResultado.setText("");
                } else {
                    // Cerrar la ventana actual y mostrar MainApp
                    dispose();
                    MainApp mainApp = new MainApp();
                    mainApp.setVisible(true);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                ConversorTemperaturas conversor = new ConversorTemperaturas();
                conversor.setVisible(true);
            }
        });
    }
}
